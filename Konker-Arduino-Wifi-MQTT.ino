#include <SPI.h>
#include <WiFi.h>
#include <PubSubClient.h>

//Arduino GPIOs
int sensorPin = A0;

//WiFi variables
char ssid[] = "my_ssid";     //  your wifi network SSID (name)
const char pass[] = "my_wifi_password>";  // your wifi password
int status = WL_IDLE_STATUS;     // the Wifi radio's status

//MQTT Variables
char mqtt_server[] = "mqtt.demo.konkerlabs.net"; // MQTT address of the Konker platform
char PUB[] = "<pub/....../sensor>"; // MQTT Topic to publish messages (use the one provided by the platform)
char USER[] = "<user>"; // MQTT username (use the one randomly generated by the platform)
char PWD[] = "<password>"; // MQTT password (use the one randomly generated by the platform)


//Defining the WiFi and MQTT client
WiFiClient wifi;
PubSubClient mqtt(mqtt_server, 1883, NULL, wifi);


////////////////////////////////// SENSOR HANDLING \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

// read the sensor data
int readSensor() {
  return analogRead(sensorPin);
}


//////////////////////////// MQTT AND WIFI CONNECTIVITY \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

// connect to Wifi
void wifiConnect() {
  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println(F("WiFi shield not present"));
    // don't continue: This will loop forever
    while (true);
  }

  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    Serial.print(F("Attempting to connect to WPA SSID: "));
    Serial.println(ssid);
    // Connect to WPA/WPA2 network:
    status = WiFi.begin(ssid, pass);
    // wait 5 seconds for connection:
    delay(5000);
  }
}


//Now let's create a function to connect/reconnect to the MQTT broker
void mqttReconnect() {
  // Loop until we're reconnected
  while (!mqtt.connected()) {
    Serial.print(F("Attempting MQTT connection..."));
    // Attempt to connect
    if (mqtt.connect("ArduClient", USER, PWD)) {
      Serial.println("connected");
    } else {
      Serial.print(("failed, rc=") + String(mqtt.state()) + (" try again in 5 seconds"));
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

/////////////////////////////////// DATA PUBLISHING \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

// send a numeric value to the Konker Platform
void sendValueToKonker(int value){
  char buffer [128];

  // prepare the message that will be sent to the platform
  String message = ("{\"value\":" + String(value) + "}"); 
  Serial.println(message);

  // publish the message  
  if (!mqtt.connected()) {
    mqttReconnect();
  }
  message.toCharArray(buffer, message.length() + 1);
  mqtt.publish(PUB, buffer);
}


// read and publish the data
void publishSensorData() {
  sendValueToKonker(readSensor());
}



///////////////////////////////////  MAIN ROUTINES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

void setup() {
  Serial.begin(9600);
  Serial.println("Starting...");
  wifiConnect();
}

void loop() {
  delay(5000);
  publishSensorData();
}
